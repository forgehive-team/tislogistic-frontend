{"version":3,"file":"BreadCrumbs-7a67b271.js","sources":["../../../../node_modules/nuxt-seo-kit/composables/breacrumbs.ts","../../../../node_modules/nuxt-seo-kit/components/Breadcrumbs.vue","../../../../components/Shared/BreadCrumbs.vue"],"sourcesContent":["import type { ParsedURL } from 'ufo'\nimport { hasTrailingSlash, parseURL, stringifyParsedURL, withTrailingSlash } from 'ufo'\nimport { resolveAbsoluteInternalLink, resolveTrailingSlash } from '#imports'\n\nconst getBreadcrumbs = (input: string) => {\n  const startNode = parseURL(input)\n  const appendsTrailingSlash = hasTrailingSlash(startNode.pathname)\n\n  const stepNode = (node: ParsedURL, nodes: string[] = []) => {\n    const fullPath = stringifyParsedURL(node)\n    // the pathname will always be without the trailing slash\n    const currentPathName = node.pathname\n    // when we hit the root the path will be an empty string; we swap it out for a slash\n    nodes.push(fullPath || '/')\n    // strip the last path segment (/my/cool/path -> /my/cool)\n    node.pathname = currentPathName.substring(0, currentPathName.lastIndexOf('/'))\n    // if the input was provided with a trailing slash we need to honour that\n    if (appendsTrailingSlash)\n      node.pathname = withTrailingSlash(node.pathname.substring(0, node.pathname.lastIndexOf('/')))\n\n    // if we still have a pathname, and it's different, traverse\n    if (node.pathname !== currentPathName)\n      stepNode(node, nodes)\n    return nodes\n  }\n  return stepNode(startNode)\n}\n\nexport function useBreadcrumbs() {\n  const router = useRouter()\n  return computed(() => {\n    const routes = router.getRoutes()\n    const route = router.currentRoute.value\n    return getBreadcrumbs(route.path)\n      .reverse()\n      .map(path => ({\n        path,\n        meta: routes.find(route => route.path === path)?.meta,\n      }))\n      .map(({ path, meta }) => {\n        // title case string regex\n        let title = meta?.breadcrumbTitle || meta?.title\n        if (!title)\n          if (path === '/')\n            title = 'Home'\n          else\n            // pop last url segment and title case it\n            title = titleCase(path.split('/').pop() || '')\n        return {\n          schema: {\n            name: title,\n            item: resolveAbsoluteInternalLink(path),\n          },\n          to: resolveTrailingSlash(path),\n          title,\n        }\n      })\n  })\n}\n","<script lang=\"ts\" setup>\nconst breadcrumbs = useBreadcrumbs()\nconst schemaBreadcrumbs = computed(() => breadcrumbs.value.map(breadcrumb => breadcrumb.schema))\n\nuseSchemaOrg([\n  defineBreadcrumb({\n    itemListElement: schemaBreadcrumbs,\n  }),\n])\n</script>\n\n<template>\n  <nav aria-label=\"Breadcrumb\">\n    <ul v-if=\"breadcrumbs.length > 1\">\n      <template\n        v-for=\"(item, key) in breadcrumbs\"\n        :key=\"key\"\n      >\n        <li>\n          <slot name=\"breadcrumb\" :to=\"item.to\" :title=\"item.title\" :last=\"key === breadcrumbs.length - 1\" :first=\"key === 0\">\n            <NuxtLink :to=\"item.to\">\n              {{ item.title }}\n            </NuxtLink>\n          </slot>\n        </li>\n      </template>\n    </ul>\n  </nav>\n</template>\n","<template>\n    <Breadcrumbs class=\"breadcrumbs\">\n        <template #breadcrumb=\"{ to, title }\">\n            <NuxtLink class=\"breadcrumbs__link\" :to=\"to\">\n                {{\n                    reactiveLabel && to === currentRoute ? reactiveLabel : title\n                }}\n            </NuxtLink>\n        </template>\n    </Breadcrumbs>\n</template>\n\n<script>\nexport default {\n    props: {\n        reactiveLabel: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n    setup() {\n        const route = useRoute();\n        const currentRoute = route.fullPath;\n        return {\n            currentRoute,\n        };\n    },\n};\n</script>\n<style\n    src=\"@/assets/scss/components/Shared/BreadCrumbs.scss\"\n    lang=\"scss\"\n></style>\n"],"names":["_ssrRenderComponent","_mergeProps","_withCtx","_push","_parent","_ssrInterpolate","_createTextVNode","_toDisplayString"],"mappings":";;;;;;;;AAIA,MAAA,iBAAA,CAAA,UAAA;AACE,QAAA,YAAA,SAAA,KAAA;AACA,QAAA,uBAAA,iBAAA,UAAA,QAAA;AAEA,QAAA,WAAA,CAAA,MAAA,QAAA,CAAA,MAAA;AACE,UAAA,WAAA,mBAAA,IAAA;AAEA,UAAA,kBAAA,KAAA;AAEA,UAAA,KAAA,YAAA,GAAA;AAEA,SAAA,WAAA,gBAAA,UAAA,GAAA,gBAAA,YAAA,GAAA,CAAA;AAEA,QAAA;AACE,WAAA,WAAA,kBAAA,KAAA,SAAA,UAAA,GAAA,KAAA,SAAA,YAAA,GAAA,CAAA,CAAA;AAGF,QAAA,KAAA,aAAA;AACE,eAAA,MAAA,KAAA;AACF,WAAA;AAAA,EAAO;AAET,SAAA,SAAA,SAAA;AACF;AAEO,SAAA,iBAAA;AACL,QAAA,SAAA;AACA,SAAA,SAAA,MAAA;AACE,UAAA,SAAA,OAAA;AACA,UAAA,QAAA,OAAA,aAAA;AACA,WAAA,eAAA,MAAA,IAAA,EAAA,UAAA,IAAA,CAAA,SAAA;;AAAA;AAAA,QAEgB;AAAA,QACZ,OAAA,YAAA,KAAA,CAAA,WAAA,OAAA,SAAA,IAAA,MAAA,mBAAA;AAAA,MACiD;AAAA,KAAA,EAAA,IAAA,CAAA,EAAA,MAAA,KAAA,MAAA;AAIjD,UAAA,SAAA,6BAAA,qBAAA,6BAAA;AACA,UAAA,CAAA;AACE,YAAA,SAAA;AACE,kBAAA;AAAA;AAGA,kBAAA,UAAA,KAAA,MAAA,GAAA,EAAA,IAAA,KAAA,EAAA;AACJ,aAAA;AAAA,QAAO,QAAA;AAAA,UACG,MAAA;AAAA,UACA,MAAA,4BAAA,IAAA;AAAA,QACgC;AAAA,QACxC,IAAA,qBAAA,IAAA;AAAA,QAC6B;AAAA,MAC7B;AAAA,IACF,CAAA;AAAA,EACD,CAAA;AAEP;;;;;ACzDA,UAAA,cAAA;AACA,UAAA,oBAAA,SAAA,MAAA,YAAA,MAAA,IAAA,CAAA,eAAA,WAAA,MAAA,CAAA;AAEA,iBAAA;AAAA,MAAa,iBAAA;AAAA,QACM,iBAAA;AAAA,MACE,CAAA;AAAA,IAClB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMH,MAAA,YAAA;AAAA,EACI,OAAA;AAAA,IACI,eAAA;AAAA;MAEI,UAAA;AAAA;;;EAIR,QAAA;AACI,UAAA,QAAA;AACA,UAAA,eAAA,MAAA;AACA,WAAA;AAAA;;;AAIR;;;;AA3BiB,QAAAA,mBAAA,wBAAAC,WAAA,EAAA,OAAA,cAAA,GAAA,MAAA,GAAA;AAAA,IACE,YAAAC,QAAA,CAAA,EAAA,IAAA,MAAA,GAAAC,QAAAC,UAAA,aAAA;;;UACG,OAAA;AAAA,UAA2B;AAAA;;;AAE7B,cAAAD,OAAA,GAAAE,eAAA,OAAA,iBAAA,OAAA,OAAA,eAAA,OAAA,gBAAA,KAAA,GAAA;AAAA;;gBAAAC,gBAAAC,gBAAA,OAAA,iBAAA,OAAA,OAAA,eAAA,OAAA,gBAAA,KAAA,GAAA,CAAA;AAAA;;;;;;;;YAFE,OAAA;AAAA,YAA2B;AAAA;;cAE7BD,gBAAAC,gBAAA,OAAA,iBAAA,OAAA,OAAA,eAAA,OAAA,gBAAA,KAAA,GAAA,CAAA;AAAA;;;;;;;;;;;;;;;;","x_google_ignoreList":[0,1]}