{"version":3,"file":"internalLinks-dc4e1b80.js","sources":["../../../../node_modules/@unhead/vue/dist/index.mjs","../../../../node_modules/nuxt-seo-kit/composables/casing.ts","../../../../virtual:nuxt:C:/Users/tzhovtyy/Desktop/tislogistic-frontend/.nuxt/modules/config/nuxt-seo-kit.mjs","../../../../node_modules/nuxt-seo-kit/composables/internalLinks.ts"],"sourcesContent":["import { whitelistSafeInput, unpackMeta, composableNames } from 'unhead';\nexport { createHeadCore } from 'unhead';\nimport { u as useHead, h as headSymbol, r as resolveUnrefHeadInput, s as serverUseHead } from './shared/vue.bc44c3fa.mjs';\nexport { V as VueReactiveUseHeadPlugin, a as createHead, c as createServerHead, i as injectHead } from './shared/vue.bc44c3fa.mjs';\nimport { getCurrentInstance, ref, watchEffect } from 'vue';\nimport { asArray } from '@unhead/shared';\n\nconst VueHeadMixin = {\n  created() {\n    const instance = getCurrentInstance();\n    if (!instance)\n      return;\n    const options = instance.type;\n    if (!options || !(\"head\" in options))\n      return;\n    const source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\n    useHead(source);\n  }\n};\n\nconst Vue2ProvideUnheadPlugin = function(_Vue, head) {\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      const origProvide = options.provide;\n      options.provide = function() {\n        let origProvideResult;\n        if (typeof origProvide === \"function\")\n          origProvideResult = origProvide.call(this);\n        else\n          origProvideResult = origProvide || {};\n        return {\n          ...origProvideResult,\n          [headSymbol]: head\n        };\n      };\n    }\n  });\n};\n\nfunction useHeadSafe(input, options = {}) {\n  return useHead(input, { ...options, transform: whitelistSafeInput });\n}\n\nconst useSeoMeta = (input, options) => {\n  const headInput = ref({});\n  watchEffect(() => {\n    const resolvedMeta = resolveUnrefHeadInput(input);\n    const { title, titleTemplate, ...meta } = resolvedMeta;\n    headInput.value = {\n      title,\n      titleTemplate,\n      meta: unpackMeta(meta)\n    };\n  });\n  return useHead(headInput, options);\n};\n\nfunction useServerHead(input, options = {}) {\n  return serverUseHead(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerHeadSafe(input, options = {}) {\n  return useHeadSafe(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerSeoMeta(input, options) {\n  return useSeoMeta(input, { ...options || {}, mode: \"server\" });\n}\n\nconst useTagTitle = (title) => useHead({ title });\nconst useTitleTemplate = (titleTemplate) => useHead({ titleTemplate });\nconst useTagMeta = (meta) => useHead({ meta: asArray(meta) });\nconst useTagMetaFlat = (meta) => {\n  const input = ref({});\n  watchEffect(() => {\n    input.value = unpackMeta(resolveUnrefHeadInput(meta));\n  });\n  return useHead({ meta: input });\n};\nconst useTagLink = (link) => useHead({ link: asArray(link) });\nconst useTagScript = (script) => useHead({ script: asArray(script) });\nconst useTagStyle = (style) => useHead({ style: asArray(style) });\nconst useTagNoscript = (noscript) => useHead({ noscript: asArray(noscript) });\nconst useTagBase = (base) => useHead({ base });\nconst useHtmlAttrs = (attrs) => useHead({ htmlAttrs: attrs });\nconst useBodyAttrs = (attrs) => useHead({ bodyAttrs: attrs });\nconst useServerTagTitle = (title) => useServerHead({ title });\nconst useServerTitleTemplate = (titleTemplate) => useServerHead({ titleTemplate });\nconst useServerTagMeta = (meta) => useServerHead({ meta: asArray(meta) });\nconst useServerTagMetaFlat = (meta) => {\n  const input = ref({});\n  watchEffect(() => {\n    input.value = unpackMeta(resolveUnrefHeadInput(meta));\n  });\n  return useServerHead({ meta: input });\n};\nconst useServerTagLink = (link) => useServerHead({ link: asArray(link) });\nconst useServerTagScript = (script) => useServerHead({ script: asArray(script) });\nconst useServerTagStyle = (style) => useServerHead({ style: asArray(style) });\nconst useServerTagNoscript = (noscript) => useServerHead({ noscript: asArray(noscript) });\nconst useServerTagBase = (base) => useServerHead({ base });\nconst useServerHtmlAttrs = (attrs) => useServerHead({ htmlAttrs: attrs });\nconst useServerBodyAttrs = (attrs) => useHead({ bodyAttrs: attrs });\n\nconst coreComposableNames = [\n  \"injectHead\"\n];\nconst unheadVueComposablesImports = {\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\n};\n\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, headSymbol, resolveUnrefHeadInput, unheadVueComposablesImports, useBodyAttrs, useHead, useHeadSafe, useHtmlAttrs, useSeoMeta, useServerBodyAttrs, useServerHead, useServerHeadSafe, useServerHtmlAttrs, useServerSeoMeta, useServerTagBase, useServerTagLink, useServerTagMeta, useServerTagMetaFlat, useServerTagNoscript, useServerTagScript, useServerTagStyle, useServerTagTitle, useServerTitleTemplate, useTagBase, useTagLink, useTagMeta, useTagMetaFlat, useTagNoscript, useTagScript, useTagStyle, useTagTitle, useTitleTemplate };\n","export const titleCase = (s: string) => {\n  s = s.replaceAll('-', ' ')\n  // title case each word in s\n  return s.replace(/\\w\\S*/g, w => w.charAt(0).toUpperCase() + w.substr(1).toLowerCase())\n}\n","export const splash = false\nexport const siteName = \"Тис Лоджистик\"\nexport const siteDescription = \"\"\nexport const siteImage = undefined\nexport const siteUrl = \"https://tislogistic.ru/\"\nexport const titleSeparator = \"|\"\nexport const trailingSlash = false\nexport const language = \"ru\"\nexport const indexable = true","import { withBase, withTrailingSlash, withoutTrailingSlash } from 'ufo'\nimport { siteUrl, trailingSlash } from '#nuxt-seo-kit/config'\n\nexport function resolveTrailingSlash(path: string) {\n  return trailingSlash ? withTrailingSlash(path) : withoutTrailingSlash(path)\n}\nexport function resolveAbsoluteInternalLink(path: string) {\n  return withBase(resolveTrailingSlash(path), siteUrl)\n}\n\nexport function createInternalLinkResolver() {\n  return (path: string) => {\n    return withBase(trailingSlash ? withTrailingSlash(path) : withoutTrailingSlash(path), siteUrl)\n  }\n}\n"],"names":[],"mappings":";;;AA0DA,SAAS,cAAc,OAAO,UAAU,IAAI;AAC1C,SAAO,cAAc,OAAO,EAAE,GAAG,SAAS,MAAM,SAAQ,CAAE;AAC5D;AC5Da,MAAA,YAAY,CAAC,MAAc;AAClC,MAAA,EAAE,WAAW,KAAK,GAAG;AAEzB,SAAO,EAAE,QAAQ,UAAU,CAAA,MAAK,EAAE,OAAO,CAAC,EAAE,YAAA,IAAgB,EAAE,OAAO,CAAC,EAAE,aAAa;AACvF;ACAO,MAAM,UAAU;ACDhB,SAAS,qBAAqB,MAAc;AACjD,SAAiD,qBAAqB,IAAI;AAC5E;AACO,SAAS,4BAA4B,MAAc;AACxD,SAAO,SAAS,qBAAqB,IAAI,GAAG,OAAO;AACrD;AAEO,SAAS,6BAA6B;AAC3C,SAAO,CAAC,SAAiB;AAChB,WAAA,SAAmD,qBAAqB,IAAI,GAAG,OAAO;AAAA,EAAA;AAEjG;","x_google_ignoreList":[0,1,3]}